{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"MongoDB Operator \u00b6 A Kubernetes Operator that creates users and databases in existing MongoDB clusters based on a custom resource. Based on the resource name, a secret is created that contains the dynamically generated database name, username and password. When the operator is installed in a cluster, a database can be requested with a MongoDB resource as shown on the usage page . The MongoDB Operator is tested with MongoDB and DocumentDB.","title":"MongoDB Operator"},{"location":"#mongodb-operator","text":"A Kubernetes Operator that creates users and databases in existing MongoDB clusters based on a custom resource. Based on the resource name, a secret is created that contains the dynamically generated database name, username and password. When the operator is installed in a cluster, a database can be requested with a MongoDB resource as shown on the usage page . The MongoDB Operator is tested with MongoDB and DocumentDB.","title":"MongoDB Operator"},{"location":"argocd/","text":"ArgoCD \u00b6 If applications that use MongoDb resources are deployed with ArgoCD , no information about success is available in the ArgoCD UI. The application seems healthy even when no database can be created. To enhance visibility of custom resources, ArgoCD has a feature to provide health checks to consider the custom resource like MongoDb for the overall health of an application. The specific Lua health script for the MongoDb custom resource can be added to the argocd-cm ConfigMap.","title":"ArgoCD"},{"location":"argocd/#argocd","text":"If applications that use MongoDb resources are deployed with ArgoCD , no information about success is available in the ArgoCD UI. The application seems healthy even when no database can be created. To enhance visibility of custom resources, ArgoCD has a feature to provide health checks to consider the custom resource like MongoDb for the overall health of an application. The specific Lua health script for the MongoDb custom resource can be added to the argocd-cm ConfigMap.","title":"ArgoCD"},{"location":"deployment/","text":"Deployment of the MongoDB Operator \u00b6 MongoDB Operator Requirements \u00b6 To function properly, some requirements in the Kubernetes deployment must be met, and a MongoDB database instance dedicated to the Kubernetes cluster must be set up. The MongoDB Operator expects a strict 1 to 1 relation of Kubernetes Cluster and MongoDB database instance. Exactly one MongoDB Operator replica must be deployed in one Kubernetes Cluster watching all namespaces. This MongoDB Operator is the only one managing users of the MongoDB database instance dedicated to the Kubernetes cluster. Database names and usernames are created based on namespace name and MongoDB resource name to avoid naming conflicts. A database instance managed by multiple MongoDB Operators for multiple clusters would cause name conflicts and access to the same database from multiple clusters. Deployment with Kustomize \u00b6 The easiest way to deploy the MongoDB Operator is to use the remote base with Kustomize . The kustomization.yaml must include the versioned remote base and provide a secret for the MongoDB connection with a user granting the required privileges . The remote bases enable Json logging by default. Deployment with Kustomize In default namespace mongodb-operator : 1 2 3 4 5 6 7 8 9 10 # Namespace mongodb-operator is created by the remote base apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - https://github.com/SDA-SE/mongodb-operator//kustomize/release?ref=1.0.51 secretGenerator : - name : mongodb-operator namespace : mongodb-operator literals : - mongodbConnectionString=mongodb://user:s3cr3t@mongodb.mongodb:27017 In custom namespace: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # kustomization.yaml apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization namespace : custom-namespace resources : - custom-namespace-ns.yaml - https://github.com/SDA-SE/mongodb-operator//kustomize/release/no-namespace?ref=1.0.51 secretGenerator : - name : mongodb-operator literals : - mongodbConnectionString=mongodb://user:s3cr3t@mongodb.mongodb:27017 # custom-namespace-ns.yaml apiVersion : v1 kind : Namespace metadata : name : custom-namespace Plain Secrets Do not use plain secrets in GitOps repositories! Consider tools like Sealed Secrets or External Secrets to provide secrets for GitOps deployments securely. Don't reference the default branch Never use a remote base from the default branch (without ?ref=x.y.z ). Due to the release process, it is possible that the image referenced in the default branch does not exist yet. Deployments will fail. Also breaking releases may be deployed unexpectitly when not referencing a defined tag. TLS connections To connect to MongoDB or DocumentDB using TLS, add the query param tls=true to the secret MONGODB_CONNECTION_STRING and reference the CA in PEM format in a configMapGenerator like this: 1 2 3 4 5 configMapGenerator : - name : mongodb-operator-ca-pem behavior : merge files : - ca-of-my-mongo-server.pem Manual Deployment \u00b6 Kubernetes \u00b6 An example deployment of the MongoDB Operator that covers the following requirements is available in the GitHub Repository of the MongoDB Operator. Service Account \u00b6 The MongoDB Operator requires a ServiceAccount with some privileges for the Kubernetes API from a ClusterRole : For the resource mongodbs the following verbs are required: watch list get update For the resource mongodbs/status the following verbs are required: watch list get update For the resource secrets the following verbs are required: create update For the resource customresourcedefinitions with the resource name mongodbs.persistence.sda-se.com the following verbs are required: get Custom Resource Definition \u00b6 The CRD mongodbs must be applied. Database \u00b6 A MongoDB database instance or an AWS DocumentDB cluster must be set up separately from the deployment of the MongoDB Operator. A user for MongoDB Operator must be created. The user of the MongoDB Operator must be granted userAdminAnyDatabase to function properly. dbAdminAnyDatabase is needed to support spec.database.pruneAfterDelete: true of the MongoDB custom resource. pruneAfterDelete is suggested for develop and test environments only where pull request or temporary test deployments could create a big amount of temporary used databases. MongoDB Operator Image \u00b6 The image is hosted at quay.io/sdase/mongodb-operator . Base Image \u00b6 This container is based on the distroless Java image by Google . The base image provides both manual and automatic ways to configure memory limits of the JVM. Environment Variables \u00b6 The following environment variables can be used to configure the Docker container: Java \u00b6 JAVA_TOOL_OPTIONS string Set options for the JVM. If Java options are set, you will find Picked up JAVA_TOOL_OPTIONS: \"-Xmx340m\" or similar in the log. Example: -Xmx340m to set the max heap size MongoDB \u00b6 When connecting to the MongoDB, the configured hosts are checked. If any ends with .docdb.amazonaws.com , a connection to AWS DocumentDB is assumed, and the behavior slightly changes. While users for requested databases are created in the database when using MongoDB, all users will be created in the admin database when AWS DocumentDB is used. MONGODB_CONNECTION_STRING string The connection String that covers all configuration to access the MongoDB database. Example: mongodb://username:password@mongodb.mongodb:27017 TRUSTED_CERTIFICATES_DIR Directory in the container where CA certificates or certificate bundles in PEM format can be mounted. These certificates are used to verify SSL connections to the database. The configuration is ignored if no files are mounted. To consider, the mounted certifaces, the MONGODB_CONNECTION_STRING must contain the query parameter tls=true . Startup will fail if the directory is not readable. Default: /var/trust/certificates Logging \u00b6 ENABLE_JSON_LOGGING boolean Enables logging as Json if true (case-insensitive). Configuration errors are never logged as Json. Each log will be one line of Json, containing the keys: level : \"INFO\" , \"WARN\" or \"ERROR\" . message : The log message. exception : The exception, if any. mdc : Object with additional key-value information, if any. Default: none , effectively false Endpoints \u00b6 The image exposes port 8081 for monitoring purposes. It provides the following endpoints: Readiness: http://{serviceUrl}:8081/health/readiness Liveness: http://{serviceUrl}:8081/health/liveness Metrics in prometheus format: http://{serviceUrl}:8081/metrics/prometheus The provided metrics should be compatible with the JVM Micrometer Dashboard","title":"Deployment"},{"location":"deployment/#deployment-of-the-mongodb-operator","text":"","title":"Deployment of the MongoDB Operator"},{"location":"deployment/#mongodb-operator-requirements","text":"To function properly, some requirements in the Kubernetes deployment must be met, and a MongoDB database instance dedicated to the Kubernetes cluster must be set up. The MongoDB Operator expects a strict 1 to 1 relation of Kubernetes Cluster and MongoDB database instance. Exactly one MongoDB Operator replica must be deployed in one Kubernetes Cluster watching all namespaces. This MongoDB Operator is the only one managing users of the MongoDB database instance dedicated to the Kubernetes cluster. Database names and usernames are created based on namespace name and MongoDB resource name to avoid naming conflicts. A database instance managed by multiple MongoDB Operators for multiple clusters would cause name conflicts and access to the same database from multiple clusters.","title":"MongoDB Operator Requirements"},{"location":"deployment/#deployment-with-kustomize","text":"The easiest way to deploy the MongoDB Operator is to use the remote base with Kustomize . The kustomization.yaml must include the versioned remote base and provide a secret for the MongoDB connection with a user granting the required privileges . The remote bases enable Json logging by default. Deployment with Kustomize In default namespace mongodb-operator : 1 2 3 4 5 6 7 8 9 10 # Namespace mongodb-operator is created by the remote base apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization resources : - https://github.com/SDA-SE/mongodb-operator//kustomize/release?ref=1.0.51 secretGenerator : - name : mongodb-operator namespace : mongodb-operator literals : - mongodbConnectionString=mongodb://user:s3cr3t@mongodb.mongodb:27017 In custom namespace: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # kustomization.yaml apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization namespace : custom-namespace resources : - custom-namespace-ns.yaml - https://github.com/SDA-SE/mongodb-operator//kustomize/release/no-namespace?ref=1.0.51 secretGenerator : - name : mongodb-operator literals : - mongodbConnectionString=mongodb://user:s3cr3t@mongodb.mongodb:27017 # custom-namespace-ns.yaml apiVersion : v1 kind : Namespace metadata : name : custom-namespace Plain Secrets Do not use plain secrets in GitOps repositories! Consider tools like Sealed Secrets or External Secrets to provide secrets for GitOps deployments securely. Don't reference the default branch Never use a remote base from the default branch (without ?ref=x.y.z ). Due to the release process, it is possible that the image referenced in the default branch does not exist yet. Deployments will fail. Also breaking releases may be deployed unexpectitly when not referencing a defined tag. TLS connections To connect to MongoDB or DocumentDB using TLS, add the query param tls=true to the secret MONGODB_CONNECTION_STRING and reference the CA in PEM format in a configMapGenerator like this: 1 2 3 4 5 configMapGenerator : - name : mongodb-operator-ca-pem behavior : merge files : - ca-of-my-mongo-server.pem","title":"Deployment with Kustomize"},{"location":"deployment/#manual-deployment","text":"","title":"Manual Deployment"},{"location":"deployment/#kubernetes","text":"An example deployment of the MongoDB Operator that covers the following requirements is available in the GitHub Repository of the MongoDB Operator.","title":"Kubernetes"},{"location":"deployment/#service-account","text":"The MongoDB Operator requires a ServiceAccount with some privileges for the Kubernetes API from a ClusterRole : For the resource mongodbs the following verbs are required: watch list get update For the resource mongodbs/status the following verbs are required: watch list get update For the resource secrets the following verbs are required: create update For the resource customresourcedefinitions with the resource name mongodbs.persistence.sda-se.com the following verbs are required: get","title":"Service Account"},{"location":"deployment/#custom-resource-definition","text":"The CRD mongodbs must be applied.","title":"Custom Resource Definition"},{"location":"deployment/#database","text":"A MongoDB database instance or an AWS DocumentDB cluster must be set up separately from the deployment of the MongoDB Operator. A user for MongoDB Operator must be created. The user of the MongoDB Operator must be granted userAdminAnyDatabase to function properly. dbAdminAnyDatabase is needed to support spec.database.pruneAfterDelete: true of the MongoDB custom resource. pruneAfterDelete is suggested for develop and test environments only where pull request or temporary test deployments could create a big amount of temporary used databases.","title":"Database"},{"location":"deployment/#mongodb-operator-image","text":"The image is hosted at quay.io/sdase/mongodb-operator .","title":"MongoDB Operator Image"},{"location":"deployment/#base-image","text":"This container is based on the distroless Java image by Google . The base image provides both manual and automatic ways to configure memory limits of the JVM.","title":"Base Image"},{"location":"deployment/#environment-variables","text":"The following environment variables can be used to configure the Docker container:","title":"Environment Variables"},{"location":"deployment/#java","text":"JAVA_TOOL_OPTIONS string Set options for the JVM. If Java options are set, you will find Picked up JAVA_TOOL_OPTIONS: \"-Xmx340m\" or similar in the log. Example: -Xmx340m to set the max heap size","title":"Java"},{"location":"deployment/#mongodb","text":"When connecting to the MongoDB, the configured hosts are checked. If any ends with .docdb.amazonaws.com , a connection to AWS DocumentDB is assumed, and the behavior slightly changes. While users for requested databases are created in the database when using MongoDB, all users will be created in the admin database when AWS DocumentDB is used. MONGODB_CONNECTION_STRING string The connection String that covers all configuration to access the MongoDB database. Example: mongodb://username:password@mongodb.mongodb:27017 TRUSTED_CERTIFICATES_DIR Directory in the container where CA certificates or certificate bundles in PEM format can be mounted. These certificates are used to verify SSL connections to the database. The configuration is ignored if no files are mounted. To consider, the mounted certifaces, the MONGODB_CONNECTION_STRING must contain the query parameter tls=true . Startup will fail if the directory is not readable. Default: /var/trust/certificates","title":"MongoDB"},{"location":"deployment/#logging","text":"ENABLE_JSON_LOGGING boolean Enables logging as Json if true (case-insensitive). Configuration errors are never logged as Json. Each log will be one line of Json, containing the keys: level : \"INFO\" , \"WARN\" or \"ERROR\" . message : The log message. exception : The exception, if any. mdc : Object with additional key-value information, if any. Default: none , effectively false","title":"Logging"},{"location":"deployment/#endpoints","text":"The image exposes port 8081 for monitoring purposes. It provides the following endpoints: Readiness: http://{serviceUrl}:8081/health/readiness Liveness: http://{serviceUrl}:8081/health/liveness Metrics in prometheus format: http://{serviceUrl}:8081/metrics/prometheus The provided metrics should be compatible with the JVM Micrometer Dashboard","title":"Endpoints"},{"location":"process/","text":"How the MongoDB Operator works \u00b6 The MongoDB Operator reacts on reconcile requests of the Kubernetes API. When a MongoDb resource is reconciled, it checks the status and creates a new database user and the Kubernetes secret if needed. On cleanup requests, it will delete the user and, if requested, removes the database. Kubernetes will care about deleting the secret when deletion of the MongoDb resource is requested. The process is described in the following sequence diagram:","title":"How the MongoDB Operator works"},{"location":"process/#how-the-mongodb-operator-works","text":"The MongoDB Operator reacts on reconcile requests of the Kubernetes API. When a MongoDb resource is reconciled, it checks the status and creates a new database user and the Kubernetes secret if needed. On cleanup requests, it will delete the user and, if requested, removes the database. Kubernetes will care about deleting the secret when deletion of the MongoDb resource is requested. The process is described in the following sequence diagram:","title":"How the MongoDB Operator works"},{"location":"usage/","text":"Usage of the MongoDB resource \u00b6 When a MongoDB Operator is installed in a Kubernetes cluster, it watches MongoDB custom resources. Creating a MongoDB resource in a namespace triggers that a database user for resource is created. To request a MongoDB database with associated user in a cluster with the MongoDB Operator, a resource like the following must be applied: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion : persistence.sda-se.com/v1beta1 kind : MongoDb metadata : name : my-db namespace : test-namespace spec : database : pruneAfterDelete : true # optional, default false connectionStringOptions : \"\" # optional, defaults to the ones used by MongoDB operator secret : databaseKey : d # optional, default 'database' usernameKey : u # optional, default 'username' passwordKey : p # optional, default 'password' connectionStringKey : c # optional, default 'connectionString' This will create a database named test-namespace_my-db and the user test-namespace_my-db with read-write access to that database and a secret named my-db in test-namespace . The secret will provide the data d: test-namespace_my-db , u: test-namespace_my-db and p: <random-password> (with base64 encoded values). When the MongoDB resource is deleted, the database user and the secret are deleted as well. If spec.database.pruneAfterDelete is true, the whole database with all content will be deleted. With an appropriate Kustomize configuration (similar to the configuration required for Sealed Secrets), databases created this way can be used in PR deployments with name suffix. The connectionStringOptions will overwrite the defaults which are used by the MongoDB operator itself to connect to the MongoDB. MongoDB Operator will set the authSource as the allowed database itself for MongoDB instances and as the admin database for DocumentDB instances. These settings are the defaults for the respective implementations when connecting to a specific database. Therefore authSource should not be configured in the connection options on client side when connecting to a database provided by the MongoDB Operator. Caveats \u00b6 spec.database.pruneAfterDelete: true is only supported if the user of the MongoDB Operator is allowed to drop databases. Other settings than available in the secret for the database instance are not covered by the MongoDB Operator yet. host , options , etc. must be configured separately for each Kubernetes cluster unless the workload is configured with the connectionString . There is a hard limit of 64 characters for the database name. The database name is built from <metadata.namespace>_<metadata.name> . The namespace is used to avoid collisions and therefore data security issues. Be aware that the length of metadata.namespace plus the length of metadata.name does not exceed 63 characters. This error can be recognized in the log of the Operator and by the fact that no Secret is created for the MongoDb resource. In some rare cases the created secret does not match the created MongoDB user due to concurrency issues. We are still investigating on this bug. In such cases, the MongoDB resource can be deleted and created again to trigger a new setup of the user. This workaround will delete the database and all collections if spec.database.pruneAfterDelete: true is set and the MongoDB Operator has the required privileges . It is important to disable spec.database.pruneAfterDelete and do not grant more than userAdminAnyDatabase to the MongoDB Operator user in production environments. Kustomize \u00b6 When using Kustomize with namePrefix or nameSuffix , the MongoDb resource must be treated the same way as a Secret, because a Secret with the same name will be created by the MongoDB Operator. The following configuration needs to be added to the kustomization.yaml . It is derived from the built in Secret configuration. 1 2 3 4 5 apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization configurations : - mongodb-configuration.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 # mongodb-configuration.yaml nameReference : # MongoDbs must be treated like Secrets when used in conjunction with name suffix or prefix - group : persistence.sda-se.com version : v1beta1 kind : MongoDb fieldSpecs : # taken from the specs of v1/Secret # https://github.com/kubernetes-sigs/kustomize/blob/master/api/konfig/builtinpluginconsts/namereference.go#L120 - path : spec/volumes/secret/secretName version : v1 kind : Pod - path : spec/containers/env/valueFrom/secretKeyRef/name version : v1 kind : Pod - path : spec/initContainers/env/valueFrom/secretKeyRef/name version : v1 kind : Pod - path : spec/containers/envFrom/secretRef/name version : v1 kind : Pod - path : spec/initContainers/envFrom/secretRef/name version : v1 kind : Pod - path : spec/imagePullSecrets/name version : v1 kind : Pod - path : spec/volumes/projected/sources/secret/name version : v1 kind : Pod - path : spec/template/spec/volumes/secret/secretName kind : Deployment - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : Deployment - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : Deployment - path : spec/template/spec/containers/envFrom/secretRef/name kind : Deployment - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : Deployment - path : spec/template/spec/imagePullSecrets/name kind : Deployment - path : spec/template/spec/volumes/projected/sources/secret/name kind : Deployment - path : spec/template/spec/volumes/secret/secretName kind : ReplicaSet - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : ReplicaSet - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : ReplicaSet - path : spec/template/spec/containers/envFrom/secretRef/name kind : ReplicaSet - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : ReplicaSet - path : spec/template/spec/imagePullSecrets/name kind : ReplicaSet - path : spec/template/spec/volumes/projected/sources/secret/name kind : ReplicaSet - path : spec/template/spec/volumes/secret/secretName kind : DaemonSet - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : DaemonSet - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : DaemonSet - path : spec/template/spec/containers/envFrom/secretRef/name kind : DaemonSet - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : DaemonSet - path : spec/template/spec/imagePullSecrets/name kind : DaemonSet - path : spec/template/spec/volumes/projected/sources/secret/name kind : DaemonSet - path : spec/template/spec/volumes/secret/secretName kind : StatefulSet - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : StatefulSet - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : StatefulSet - path : spec/template/spec/containers/envFrom/secretRef/name kind : StatefulSet - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : StatefulSet - path : spec/template/spec/imagePullSecrets/name kind : StatefulSet - path : spec/template/spec/volumes/projected/sources/secret/name kind : StatefulSet - path : spec/template/spec/volumes/secret/secretName kind : Job - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : Job - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : Job - path : spec/template/spec/containers/envFrom/secretRef/name kind : Job - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : Job - path : spec/template/spec/imagePullSecrets/name kind : Job - path : spec/template/spec/volumes/projected/sources/secret/name kind : Job - path : spec/jobTemplate/spec/template/spec/volumes/secret/secretName kind : CronJob - path : spec/jobTemplate/spec/template/spec/volumes/projected/sources/secret/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/containers/envFrom/secretRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/initContainers/envFrom/secretRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/imagePullSecrets/name kind : CronJob - path : spec/tls/secretName kind : Ingress - path : metadata/annotations/ingress.kubernetes.io\\/auth-secret kind : Ingress - path : metadata/annotations/nginx.ingress.kubernetes.io\\/auth-secret kind : Ingress - path : metadata/annotations/nginx.ingress.kubernetes.io\\/auth-tls-secret kind : Ingress - path : spec/tls/secretName kind : Ingress - path : imagePullSecrets/name kind : ServiceAccount - path : parameters/secretName kind : StorageClass - path : parameters/adminSecretName kind : StorageClass - path : parameters/userSecretName kind : StorageClass - path : parameters/secretRef kind : StorageClass - path : rules/resourceNames kind : Role - path : rules/resourceNames kind : ClusterRole - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : Service group : serving.knative.dev version : v1 - path : spec/azureFile/secretName kind : PersistentVolume","title":"Usage"},{"location":"usage/#usage-of-the-mongodb-resource","text":"When a MongoDB Operator is installed in a Kubernetes cluster, it watches MongoDB custom resources. Creating a MongoDB resource in a namespace triggers that a database user for resource is created. To request a MongoDB database with associated user in a cluster with the MongoDB Operator, a resource like the following must be applied: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 apiVersion : persistence.sda-se.com/v1beta1 kind : MongoDb metadata : name : my-db namespace : test-namespace spec : database : pruneAfterDelete : true # optional, default false connectionStringOptions : \"\" # optional, defaults to the ones used by MongoDB operator secret : databaseKey : d # optional, default 'database' usernameKey : u # optional, default 'username' passwordKey : p # optional, default 'password' connectionStringKey : c # optional, default 'connectionString' This will create a database named test-namespace_my-db and the user test-namespace_my-db with read-write access to that database and a secret named my-db in test-namespace . The secret will provide the data d: test-namespace_my-db , u: test-namespace_my-db and p: <random-password> (with base64 encoded values). When the MongoDB resource is deleted, the database user and the secret are deleted as well. If spec.database.pruneAfterDelete is true, the whole database with all content will be deleted. With an appropriate Kustomize configuration (similar to the configuration required for Sealed Secrets), databases created this way can be used in PR deployments with name suffix. The connectionStringOptions will overwrite the defaults which are used by the MongoDB operator itself to connect to the MongoDB. MongoDB Operator will set the authSource as the allowed database itself for MongoDB instances and as the admin database for DocumentDB instances. These settings are the defaults for the respective implementations when connecting to a specific database. Therefore authSource should not be configured in the connection options on client side when connecting to a database provided by the MongoDB Operator.","title":"Usage of the MongoDB resource"},{"location":"usage/#caveats","text":"spec.database.pruneAfterDelete: true is only supported if the user of the MongoDB Operator is allowed to drop databases. Other settings than available in the secret for the database instance are not covered by the MongoDB Operator yet. host , options , etc. must be configured separately for each Kubernetes cluster unless the workload is configured with the connectionString . There is a hard limit of 64 characters for the database name. The database name is built from <metadata.namespace>_<metadata.name> . The namespace is used to avoid collisions and therefore data security issues. Be aware that the length of metadata.namespace plus the length of metadata.name does not exceed 63 characters. This error can be recognized in the log of the Operator and by the fact that no Secret is created for the MongoDb resource. In some rare cases the created secret does not match the created MongoDB user due to concurrency issues. We are still investigating on this bug. In such cases, the MongoDB resource can be deleted and created again to trigger a new setup of the user. This workaround will delete the database and all collections if spec.database.pruneAfterDelete: true is set and the MongoDB Operator has the required privileges . It is important to disable spec.database.pruneAfterDelete and do not grant more than userAdminAnyDatabase to the MongoDB Operator user in production environments.","title":"Caveats"},{"location":"usage/#kustomize","text":"When using Kustomize with namePrefix or nameSuffix , the MongoDb resource must be treated the same way as a Secret, because a Secret with the same name will be created by the MongoDB Operator. The following configuration needs to be added to the kustomization.yaml . It is derived from the built in Secret configuration. 1 2 3 4 5 apiVersion : kustomize.config.k8s.io/v1beta1 kind : Kustomization configurations : - mongodb-configuration.yaml 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 # mongodb-configuration.yaml nameReference : # MongoDbs must be treated like Secrets when used in conjunction with name suffix or prefix - group : persistence.sda-se.com version : v1beta1 kind : MongoDb fieldSpecs : # taken from the specs of v1/Secret # https://github.com/kubernetes-sigs/kustomize/blob/master/api/konfig/builtinpluginconsts/namereference.go#L120 - path : spec/volumes/secret/secretName version : v1 kind : Pod - path : spec/containers/env/valueFrom/secretKeyRef/name version : v1 kind : Pod - path : spec/initContainers/env/valueFrom/secretKeyRef/name version : v1 kind : Pod - path : spec/containers/envFrom/secretRef/name version : v1 kind : Pod - path : spec/initContainers/envFrom/secretRef/name version : v1 kind : Pod - path : spec/imagePullSecrets/name version : v1 kind : Pod - path : spec/volumes/projected/sources/secret/name version : v1 kind : Pod - path : spec/template/spec/volumes/secret/secretName kind : Deployment - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : Deployment - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : Deployment - path : spec/template/spec/containers/envFrom/secretRef/name kind : Deployment - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : Deployment - path : spec/template/spec/imagePullSecrets/name kind : Deployment - path : spec/template/spec/volumes/projected/sources/secret/name kind : Deployment - path : spec/template/spec/volumes/secret/secretName kind : ReplicaSet - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : ReplicaSet - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : ReplicaSet - path : spec/template/spec/containers/envFrom/secretRef/name kind : ReplicaSet - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : ReplicaSet - path : spec/template/spec/imagePullSecrets/name kind : ReplicaSet - path : spec/template/spec/volumes/projected/sources/secret/name kind : ReplicaSet - path : spec/template/spec/volumes/secret/secretName kind : DaemonSet - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : DaemonSet - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : DaemonSet - path : spec/template/spec/containers/envFrom/secretRef/name kind : DaemonSet - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : DaemonSet - path : spec/template/spec/imagePullSecrets/name kind : DaemonSet - path : spec/template/spec/volumes/projected/sources/secret/name kind : DaemonSet - path : spec/template/spec/volumes/secret/secretName kind : StatefulSet - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : StatefulSet - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : StatefulSet - path : spec/template/spec/containers/envFrom/secretRef/name kind : StatefulSet - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : StatefulSet - path : spec/template/spec/imagePullSecrets/name kind : StatefulSet - path : spec/template/spec/volumes/projected/sources/secret/name kind : StatefulSet - path : spec/template/spec/volumes/secret/secretName kind : Job - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : Job - path : spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : Job - path : spec/template/spec/containers/envFrom/secretRef/name kind : Job - path : spec/template/spec/initContainers/envFrom/secretRef/name kind : Job - path : spec/template/spec/imagePullSecrets/name kind : Job - path : spec/template/spec/volumes/projected/sources/secret/name kind : Job - path : spec/jobTemplate/spec/template/spec/volumes/secret/secretName kind : CronJob - path : spec/jobTemplate/spec/template/spec/volumes/projected/sources/secret/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/initContainers/env/valueFrom/secretKeyRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/containers/envFrom/secretRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/initContainers/envFrom/secretRef/name kind : CronJob - path : spec/jobTemplate/spec/template/spec/imagePullSecrets/name kind : CronJob - path : spec/tls/secretName kind : Ingress - path : metadata/annotations/ingress.kubernetes.io\\/auth-secret kind : Ingress - path : metadata/annotations/nginx.ingress.kubernetes.io\\/auth-secret kind : Ingress - path : metadata/annotations/nginx.ingress.kubernetes.io\\/auth-tls-secret kind : Ingress - path : spec/tls/secretName kind : Ingress - path : imagePullSecrets/name kind : ServiceAccount - path : parameters/secretName kind : StorageClass - path : parameters/adminSecretName kind : StorageClass - path : parameters/userSecretName kind : StorageClass - path : parameters/secretRef kind : StorageClass - path : rules/resourceNames kind : Role - path : rules/resourceNames kind : ClusterRole - path : spec/template/spec/containers/env/valueFrom/secretKeyRef/name kind : Service group : serving.knative.dev version : v1 - path : spec/azureFile/secretName kind : PersistentVolume","title":"Kustomize"}]}