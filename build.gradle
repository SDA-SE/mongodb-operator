plugins {
  id "jacoco"
  id "idea"
  id "java"
  id 'org.sonarqube' version '6.3.1.5724'
  id "com.diffplug.spotless" version "8.0.0"
  id "com.google.cloud.tools.jib" version "3.4.5"
  id 'org.cyclonedx.bom' version '3.0.1'
}

tasks.cyclonedxBom {
  schemaVersion = org.cyclonedx.Version.VERSION_15
}

repositories {
  mavenCentral()
}

group "com.sdase.k8s.operator.mongodb"

idea.module.inheritOutputDirs = true

version = System.getenv('SEMANTIC_VERSION')

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
    vendor = JvmVendorSpec.ADOPTIUM
  }
}
tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}

jib {
  container.ports = ['8081']
  container.args = []
  from.image = 'gcr.io/distroless/java21-debian12:nonroot'
  container.user = 10001
  to.image = "$rootProject.name:latest"
  container.labels = [
      'org.opencontainers.image.title': rootProject.name,
      'org.opencontainers.image.version': version,
      'org.opencontainers.image.url': "https://github.com/SDA-SE/${rootProject.name}",
      'org.opencontainers.image.source': "https://github.com/SDA-SE/${rootProject.name}",
      'org.opencontainers.image.licenses': "MIT",
      'org.opencontainers.image.description': "A Kubernetes Operator that creates users and databases in existing MongoDB clusters based on a custom resource.",
  ]
}

project.ext {
  mongoDbDriverVersion = "5.6.1"
  slf4jVersion = "2.0.17"
  // Check on upgrade, if org.apache.commons:commons-lang3 enforcement below (L147) is still needed!
  operatorFrameworkVersion = "5.1.2"
  kubernetesServerMockVersion = "7.3.1" // align with transitive dependency of operator framework
  mockitoVersion = "5.2.0"
  jacksonVersion = "2.20.0"
  logbackContribVersion = "0.1.5"
  nettyVersion = "4.2.6.Final"
}

dependencies {

  implementation enforcedPlatform("io.netty:netty-bom:${nettyVersion}")
  annotationProcessor enforcedPlatform("io.netty:netty-bom:${nettyVersion}")
  implementation enforcedPlatform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
  annotationProcessor enforcedPlatform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
  implementation enforcedPlatform('org.eclipse.jetty:jetty-bom:11.0.26')
  implementation enforcedPlatform('org.jetbrains.kotlin:kotlin-bom:2.2.20')
  annotationProcessor enforcedPlatform("org.slf4j:slf4j-bom:${slf4jVersion}")
  implementation enforcedPlatform("org.slf4j:slf4j-bom:${slf4jVersion}")
  implementation enforcedPlatform('ch.qos.logback:logback-parent:1.5.18')

  implementation "io.javaoperatorsdk:operator-framework:${operatorFrameworkVersion}"
  annotationProcessor "io.javaoperatorsdk:operator-framework:${operatorFrameworkVersion}"

  implementation "org.mongodb:mongodb-driver-sync:${mongoDbDriverVersion}"

  implementation 'org.hibernate.validator:hibernate-validator:9.0.1.Final'
  implementation 'jakarta.el:jakarta.el-api:6.0.1'
  implementation 'org.bouncycastle:bcpkix-jdk18on:1.82'
  implementation "io.javalin:javalin:6.7.0"

  // logging
  implementation "org.slf4j:slf4j-api"
  implementation 'ch.qos.logback:logback-classic'
  implementation "ch.qos.logback.contrib:logback-json-classic:${logbackContribVersion}"
  implementation "ch.qos.logback.contrib:logback-jackson:${logbackContribVersion}"
  implementation 'io.micrometer:micrometer-registry-prometheus:1.15.4'

  // test
  testImplementation enforcedPlatform("org.junit:junit-bom:6.0.0")
  testImplementation enforcedPlatform('net.bytebuddy:byte-buddy-parent:1.17.7')
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.junit-pioneer:junit-pioneer:2.3.0'
  testImplementation 'org.assertj:assertj-core:3.27.6'
  // try to replace local commons-compress management on update!
  testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.21.0', {
    // newer version from operator-framework
    exclude group: "org.apache.commons", module: "commons-lang3"
  }
  testImplementation "org.mongodb:mongodb-driver-legacy:${mongoDbDriverVersion}"
  testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
  testImplementation "uk.org.webcompere:system-stubs-jupiter:2.1.8"
  testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
  testImplementation 'org.awaitility:awaitility:4.3.0'
  testImplementation "io.fabric8:kubernetes-server-mock:${kubernetesServerMockVersion}", {
    // comes in newer version directly for implementation scope
    exclude group: 'org.bouncycastle', module: 'bcpkix-jdk18on'
  }
  testImplementation 'com.squareup.okhttp3:okhttp:5.2.0'
}

dependencyLocking { lockAllConfigurations() }

// Task for creating gradle.lockfile per module. Needed for Trivy vulnerability scan.
tasks.register('resolveAndLockAll') {
  doFirst {
    assert gradle.startParameter.writeDependencyLocks
  }
  doLast {
    configurations.findAll {
      it.canBeResolved
    }.each { it.resolve() }
  }
}

test {
  useJUnitPlatform()
}

spotless {
  java { googleJavaFormat('1.18.1') }
  enforceCheck = false
}

configurations.configureEach {
  if (it.name.startsWith("spotless")) {
    // Workaround for https://github.com/diffplug/spotless/issues/1965.
  } else {
    it.resolutionStrategy {
      failOnVersionConflict()
    }
  }
}

// begin config for SonarCloud
jacocoTestReport {
  reports {
    xml.required = true
  }
}

sonar {
  properties {
    property 'sonar.projectKey', 'SDA-SE_mongodb-operator'
    property 'sonar.organization', 'sda-se'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.token', System.getenv('SONAR_LOGIN_TOKEN')

    property 'sonar.pullrequest.provider', 'GitHub'
    property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

    if (System.getenv('GITHUB_PR') != null && System.getenv('GITHUB_PR') != "") {
      property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
      if (System.getenv('GITHUB_BRANCH') != null) {
        property 'sonar.pullrequest.branch', System.getenv('GITHUB_BRANCH')
      }
    }

    if (System.getenv('SONAR_SCM_REVISION') != null) {
      property 'sonar.scm.revision', System.getenv('SONAR_SCM_REVISION')
    }

  }
}
// end config for SonarCloud
