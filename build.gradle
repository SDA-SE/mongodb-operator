plugins {
  id "jacoco"
  id "idea"
  id "java"
  id 'org.sonarqube' version '4.3.0.3225'
  id "com.diffplug.spotless" version "6.21.0"
  id "com.google.cloud.tools.jib" version "3.3.2"
}

repositories {
  mavenCentral()
}

group "com.sdase.k8s.operator.mongodb"

idea.module.inheritOutputDirs = true

version = System.getenv('SEMANTIC_VERSION')

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
    vendor = JvmVendorSpec.ADOPTIUM
  }
}
tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jib {
  container.ports = ['8081']
  container.args = []
  from.image = 'gcr.io/distroless/java17-debian11:nonroot'
  container.user = 10001
  to.image = "$rootProject.name:latest"
  container.labels = [
      'org.opencontainers.image.title': rootProject.name,
      'org.opencontainers.image.version': version,
      'org.opencontainers.image.url': "https://github.com/SDA-SE/${rootProject.name}",
      'org.opencontainers.image.source': "https://github.com/SDA-SE/${rootProject.name}",
      'org.opencontainers.image.licenses': "MIT",
      'org.opencontainers.image.description': "A Kubernetes Operator that creates users and databases in existing MongoDB clusters based on a custom resource.",
  ]
}

project.ext {
  mongoDbDriverVersion = "4.10.2"
  slf4jVersion = "2.0.7"
  operatorFrameworkVersion = "4.4.2"
  mockitoVersion = "5.2.0"
  jacksonVersion = "2.15.2"
  logbackContribVersion = "0.1.5"
}

dependencies {

  implementation enforcedPlatform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
  annotationProcessor enforcedPlatform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
  implementation enforcedPlatform('org.eclipse.jetty:jetty-bom:9.4.52.v20230823')

  implementation "io.javaoperatorsdk:operator-framework:${operatorFrameworkVersion}", {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
    exclude group: 'com.squareup.okio', module: 'okio'
  }
  annotationProcessor "io.javaoperatorsdk:operator-framework:${operatorFrameworkVersion}", {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
    // recheck when operator-framework is upgraded
    exclude group: 'com.squareup.okio', module: 'okio'
    exclude group: "org.apache.commons", module: "commons-lang3"
  }
  // upgrade from transitive 1.15.0 in okhttp to fix CVE-2023-3635
  implementation 'com.squareup.okio:okio:3.5.0'

  implementation "org.mongodb:mongodb-driver-sync:${mongoDbDriverVersion}"

  implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
  implementation 'jakarta.el:jakarta.el-api:5.0.1'
  implementation 'org.bouncycastle:bcpkix-jdk18on:1.76'
  implementation "com.sparkjava:spark-core:2.9.4", {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
  }

  // logging
  annotationProcessor "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation 'ch.qos.logback:logback-classic:1.4.11', {
    exclude group: "org.slf4j", module: "slf4j-api"
  }
  implementation "ch.qos.logback.contrib:logback-json-classic:${logbackContribVersion}", {
    exclude group: "ch.qos.logback", module: "logback-classic"
    exclude group: "ch.qos.logback", module: "logback-core"
  }
  implementation "ch.qos.logback.contrib:logback-jackson:${logbackContribVersion}", {
    exclude group: "ch.qos.logback", module: "logback-core"
  }

  implementation 'io.micrometer:micrometer-registry-prometheus:1.11.3'

  implementation "org.apache.commons:commons-lang3:3.13.0"

  // test
  testImplementation enforcedPlatform("org.junit:junit-bom:5.10.0")
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.junit-pioneer:junit-pioneer:2.1.0'
  testImplementation 'org.assertj:assertj-core:3.24.2', {
    // conflict of 1.12.10 in assertj vs 1.12.13 in mockito-core
    exclude group: "net.bytebuddy", module: "byte-buddy"
    exclude group: "net.bytebuddy", module: "byte-buddy-agent"
  }
  testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:4.9.2', {
    exclude group: "org.slf4j", module: "slf4j-api"
    exclude group: "org.apache.commons", module: "commons-lang3"
  }
  testImplementation "org.mongodb:mongodb-driver-legacy:${mongoDbDriverVersion}"
  testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
  testImplementation "uk.org.webcompere:system-stubs-jupiter:2.0.2", {
    // conflicts with mockitoVersion
    exclude group: 'org.mockito', 'module': 'mockito-inline'
  }
  testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
  testImplementation 'org.awaitility:awaitility:4.2.0'
  testImplementation 'io.fabric8:kubernetes-server-mock:6.7.2', {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
    exclude group: "junit"
    exclude group: 'com.squareup.okio', module: 'okio'
  }
  testImplementation "junit:junit:4.13.2"
}

dependencyLocking { lockAllConfigurations() }

// Task for creating gradle.lockfile per module. Needed for Trivy vulnerability scan.
task resolveAndLockAll {
  doFirst {
    assert gradle.startParameter.writeDependencyLocks
  }
  doLast {
    configurations.findAll {
      it.canBeResolved
    }.each { it.resolve() }
  }
}

test {
  useJUnitPlatform()
}

spotless {
  java { googleJavaFormat('1.17.0') }
  enforceCheck = false
}

configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    failOnVersionConflict()
  }
}

// begin config for SonarCloud
jacocoTestReport {
  reports {
    xml.required = true
  }
}

sonar {
  properties {
    property 'sonar.projectKey', 'SDA-SE_mongodb-operator'
    property 'sonar.organization', 'sda-se'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.token', System.getenv('SONAR_LOGIN_TOKEN')

    property 'sonar.pullrequest.provider', 'GitHub'
    property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

    if (System.getenv('GITHUB_PR') != null && System.getenv('GITHUB_PR') != "") {
      property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
      if (System.getenv('GITHUB_BRANCH') != null) {
        property 'sonar.pullrequest.branch', System.getenv('GITHUB_BRANCH')
      }
    }

    if (System.getenv('SONAR_SCM_REVISION') != null) {
      property 'sonar.scm.revision', System.getenv('SONAR_SCM_REVISION')
    }

  }
}
// end config for SonarCloud
