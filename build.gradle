plugins {
  id "jacoco"
  id "idea"
  id "java"
  id 'org.sonarqube' version '3.3'
  id "com.diffplug.spotless" version "6.6.1"
  id "com.google.cloud.tools.jib" version "3.2.1"
}

repositories {
  mavenCentral()
}

group "com.sdase.k8s.operator.mongodb"

idea.module.inheritOutputDirs = true

version = System.getenv('SEMANTIC_VERSION')

sourceCompatibility = JavaVersion.VERSION_11
tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
}

jib {
  container.ports = ['8081']
  container.args = []
  from.image = 'quay.io/sdase/openjdk-runtime:11-hotspot-distroless'
  container.user = 10001
  to.image = "$rootProject.name:latest"
  container.labels = [
      'org.opencontainers.image.title': rootProject.name,
      'org.opencontainers.image.version': version,
      'org.opencontainers.image.url': "https://github.com/SDA-SE/${rootProject.name}",
      'org.opencontainers.image.source': "https://github.com/SDA-SE/${rootProject.name}",
      'org.opencontainers.image.licenses': "MIT",
      'org.opencontainers.image.description': "A Kubernetes Operator that creates users and databases in existing MongoDB clusters based on a custom resource.",
  ]
}

project.ext {
  mongoDbDriverVersion = "4.6.0"
  slf4jVersion = "1.7.36"
  operatorFrameworkVersion = "2.1.4"
  mockitoVersion = "4.6.0"
  jacksonVersion = "2.13.3"
}

dependencies {

  implementation enforcedPlatform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
  annotationProcessor enforcedPlatform("com.fasterxml.jackson:jackson-bom:${jacksonVersion}")
  implementation enforcedPlatform('org.eclipse.jetty:jetty-bom:9.4.46.v20220331')

  implementation "io.javaoperatorsdk:operator-framework:${operatorFrameworkVersion}", {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
  }
  annotationProcessor "io.javaoperatorsdk:operator-framework:${operatorFrameworkVersion}", {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
  }
  annotationProcessor "org.slf4j:slf4j-api:${slf4jVersion}"


  implementation "org.mongodb:mongodb-driver-sync:${mongoDbDriverVersion}"
  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
  implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
  implementation 'org.hibernate.validator:hibernate-validator:7.0.4.Final'
  implementation 'jakarta.el:jakarta.el-api:5.0.0'
  implementation 'org.bouncycastle:bcpkix-jdk15on:1.70'
  implementation "com.sparkjava:spark-core:2.9.3", {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
  }


  testImplementation enforcedPlatform("org.junit:junit-bom:5.8.2")
  testImplementation 'org.junit.jupiter:junit-jupiter'
  testImplementation 'org.junit-pioneer:junit-pioneer:1.7.1'
  testImplementation 'org.assertj:assertj-core:3.23.1'
  testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo:3.4.6', {
    // conflict with operator-framework
    exclude group: 'org.slf4j'
    // conflict inside flapdoodle
    exclude group: 'de.flapdoodle.embed', module: 'de.flapdoodle.embed.process'
    // conflict inside flapdoodle
    exclude group: 'de.flapdoodle', module: 'de.flapdoodle.os'
  }
  testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.process:3.1.11', {
    // conflict with operator-framework
    exclude group: 'org.slf4j'
    // conflict inside flapdoodle
    exclude group: 'de.flapdoodle', module: 'de.flapdoodle.os'
  }
  testImplementation 'de.flapdoodle:de.flapdoodle.os:1.1.9', {
    // conflict with operator-framework
    exclude group: 'org.slf4j'
  }
  testImplementation "org.mongodb:mongodb-driver-legacy:${mongoDbDriverVersion}"
  testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
  testImplementation "uk.org.webcompere:system-stubs-jupiter:2.0.1", {
    // conflicts with mockitoVersion
    exclude group: 'org.mockito', 'module': 'mockito-inline'
  }
  testImplementation "org.mockito:mockito-inline:${mockitoVersion}"
  testImplementation 'org.awaitility:awaitility:4.2.0'
  testImplementation 'io.fabric8:kubernetes-server-mock:5.12.2', {
    // self managed to avoid conflicts
    exclude group: "org.slf4j"
  }
}

test {
  useJUnitPlatform()
}

wrapper { gradleVersion = '6.5' }

spotless {
  java { googleJavaFormat('1.9') }
  enforceCheck = false
}

configurations.all {
  resolutionStrategy {
    // fail eagerly on version conflict (includes transitive dependencies)
    // e.g. multiple different versions of the same dependency (group and name are equal)
    failOnVersionConflict()
  }
}

// begin config for SonarCloud
jacocoTestReport {
  reports {
    xml.enabled true
  }
}

sonarqube {
  properties {
    property 'sonar.projectKey', 'SDA-SE_mongodb-operator'
    property 'sonar.organization', 'sda-se'
    property 'sonar.host.url', 'https://sonarcloud.io'
    property 'sonar.login', System.getenv('SONAR_LOGIN_TOKEN')

    property 'sonar.pullrequest.provider', 'GitHub'
    property 'sonar.pullrequest.github.repository', System.getenv('GITHUB_REPOSITORY')

    if (System.getenv('GITHUB_PR') != null && System.getenv('GITHUB_PR') != "") {
      property 'sonar.pullrequest.key', System.getenv('GITHUB_PR')
      if (System.getenv('GITHUB_BRANCH') != null) {
        property 'sonar.pullrequest.branch', System.getenv('GITHUB_BRANCH')
      }
    }

    if (System.getenv('SONAR_SCM_REVISION') != null) {
      property 'sonar.scm.revision', System.getenv('SONAR_SCM_REVISION')
    }

  }
}
// end config for SonarCloud
